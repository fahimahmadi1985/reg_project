{"version":3,"sources":["components/AddUser.js","components/UsersList.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["AddUser","state","fname","lname","dob","gender","onSubmit","e","preventDefault","props","add","setState","handleFormChanges","formElem","target","name","elemValue","value","console","log","className","this","type","id","onChange","onClick","Component","Users","user","map","u","index","key","scop","firstName","lastName","dateofbirth","del","Login","handleForm","submitLogin","loginCheck","App","users","addUser","stateObj","newUser","uuid","v4","push","forceUpdate","deleteUser","uid","filter","checkUser","userInfo","userExist","scope","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85952b8e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class AddUser extends Component {\n  state = {\n    fname: \"\",\n    lname: \"\",\n    dob: \"\",\n    gender: \"\"\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.add(this.state);\n    this.setState({\n      fname: \"\",\n      lname: \"\",\n      dob: \"\",\n      gender: \"\"\n    });\n  };\n\n  /* handleFN = e => {\n      this.setState({ fname: e.target.value });\n      console.log(this.state);\n    };\n  \n    handleLN = e => {\n      this.setState({ lname: e.target.value });\n      console.log(this.state);\n    };\n    handleDOB = e => {\n      this.setState({ dob: e.target.value });\n      console.log(this.state);\n    };\n    handleGender = e => {\n      this.setState({ gender: e.target.value });\n      console.log(this.state);\n    }; */\n\n  //second approach : using single handle method instead of multiple handle methods\n  handleFormChanges = e => {\n    const formElem = e.target.name;\n    const elemValue = e.target.value;\n    this.setState({\n      [formElem]: elemValue\n    });\n    console.log(this.state);\n  };\n\n  render() {\n    return (\n      <div className=\"regCont container bg-light rounded-top p-4 col-md-10\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-inline row form-group pr-3\">\n            <label className=\"col-md-2\">FirstName:</label>\n            <input\n              type=\"text\"\n              name=\"fname\"\n              id=\"fn\"\n              className=\"col-md-4 form-control\"\n              value={this.state.fname}\n              onChange={this.handleFormChanges}\n            />\n            <label className=\"col-md-2\">LastName:</label>\n            <input\n              type=\"text\"\n              name=\"lname\"\n              id=\"ln\"\n              className=\"col-md-4 form-control\"\n              value={this.state.lname}\n              onChange={this.handleFormChanges}\n            />\n          </div>\n          <div className=\"form-inline row form-group\">\n            <label className=\"col-md-2\">DateOfBirth:</label>\n            <input\n              type=\"Date\"\n              name=\"dob\"\n              id=\"dob\"\n              className=\"col-md-4 form-control\"\n              value={this.state.dob}\n              onChange={this.handleFormChanges}\n            />\n            <label className=\"col-md-2\">Gender:</label> Male\n            <input\n              type=\"radio\"\n              name=\"gender\"\n              id=\"gender\"\n              value=\"male\"\n              className=\"ml-1 form-control\"\n              onClick={this.handleFormChanges}\n            />\n            <label className=\"ml-5\">Female</label>\n            <input\n              type=\"radio\"\n              name=\"gender\"\n              id=\"gender\"\n              value=\"female\"\n              className=\"ml-1 form-control\"\n              onClick={this.handleFormChanges}\n            />\n          </div>\n          <center>\n            <input\n              type=\"submit\"\n              value=\"Register\"\n              className=\"btn btn-outline-dark btn-light mb-3 mt-4 form-control\"\n            />\n          </center>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddUser;\n","import React, { Component } from \"react\";\n\nexport class Users extends Component {\n  /*   deleteU = e => {\n    e.preventDefault();\n    const userId = e.target.id;\n    this.props.del(userId);\n  }; */\n  render() {\n    console.log(this.props);\n    return this.props.user.map((u, index) => (\n      <tr key={u.id} scop=\"row\">\n        <td>\n          <center>{index + 1}</center>\n        </td>\n        <td>{u.firstName}</td>\n        <td>{u.lastName}</td>\n        <td>{u.dateofbirth}</td>\n        <td>{u.gender}</td>\n        <td>\n          <button\n            className=\"btn btn-danger btn-xsm del-btn\"\n            /* onClick={this.deleteU} */\n            onClick={e => {\n              this.props.del(e.target.id);\n            }}\n            id={u.id}\n          >\n            x\n          </button>\n        </td>\n      </tr>\n    ));\n  }\n}\n\nexport default Users;\n","import React, { Component } from \"react\";\n\nexport class Login extends Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\"\n  };\n  handleForm = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  submitLogin = e => {\n    e.preventDefault();\n    this.props.loginCheck(this.state);\n  };\n  render() {\n    return (\n      <div className=\"bg-light rounded-top border border-warning p-4 col-md-10 container mt-4\">\n        <form onSubmit={this.submitLogin}>\n          <div className=\"form-group\">\n            <label>FirstName:</label>\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              onChange={this.handleForm}\n              className=\"form-control\"\n            />\n            <label className=\"mt-3\">LastName:</label>\n            <input\n              type=\"text\"\n              name=\"lastName\"\n              onChange={this.handleForm}\n              className=\"form-control\"\n            />\n            <input\n              type=\"submit\"\n              value=\"Login\"\n              className=\" mt-4 form-control btn-outline-dark\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport AddUser from \"./components/AddUser\";\nimport Users from \"./components/UsersList\";\nimport uuid from \"uuid\";\nimport Login from \"./components/login\";\n\nclass App extends React.Component {\n  state = {\n    users: [\n      {\n        id: \"1\",\n        firstName: \"fahim\",\n        lastName: \"ahmadi\",\n        dateofbirth: \"10-09-1985\",\n        gender: \"male\"\n      },\n      {\n        id: \"2\",\n        firstName: \"fahim\",\n        lastName: \"ahmadi\",\n        dateofbirth: \"10-08-1985\",\n        gender: \"male\"\n      }\n    ]\n  };\n\n  addUser = stateObj => {\n    const newUser = {\n      firstName: stateObj.fname,\n      lastName: stateObj.lname,\n      dateofbirth: stateObj.dob,\n      gender: stateObj.gender,\n      id: uuid.v4()\n    };\n    //console.log(newUser);\n    this.state.users.push(newUser);\n    //this.setState({ users: [...this.state.users, newUser] });\n    this.forceUpdate();\n    console.log(\"State:\");\n    console.log(this.state);\n  };\n\n  //delete users\n  deleteUser = uid => {\n    const users = this.state.users.filter(user => user.id !== uid);\n    this.setState({ users });\n\n    /* second approach to delete users\n    delete this.state.users[uid];\n    this.forceUpdate(); */\n  };\n\n  //login check\n  checkUser = userInfo => {\n    var userExist = false;\n    this.state.users.map(user =>\n      userInfo.firstName === user.firstName &&\n      userInfo.lastName === user.lastName\n        ? (userExist = true)\n        : null\n    );\n\n    userExist\n      ? console.log(\"Welcome to our website\")\n      : console.log(\"Sorry you should register yourself first!\");\n  };\n\n  render() {\n    return (\n      <div className=\"App row\">\n        <h3 className=\"welcome col-md-10 container\">Registration Form</h3>\n        <AddUser add={this.addUser} />\n        <table className=\"table table-striped container mt-5 rounded-top-lg border border-info col-md-10\">\n          <thead className=\"bg-secondary text-light\">\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">First Name</th>\n              <th scope=\"col\">Last Name</th>\n              <th scope=\"col\">Date of Birth</th>\n              <th scope=\"col\">Gender</th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody>\n            <Users user={this.state.users} del={this.deleteUser} />\n          </tbody>\n        </table>\n        <Login loginCheck={this.checkUser} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}